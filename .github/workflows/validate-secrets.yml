name: 🔍 Validate GitHub Secrets

# Workflow pour valider la configuration des secrets GitHub
# Peut être exécuté manuellement ou lors de modifications de secrets

on:
  workflow_dispatch:
    inputs:
      check_level:
        description: 'Niveau de vérification'
        required: true
        default: 'basic'
        type: choice
        options:
          - basic
          - full
          - security
  schedule:
    # Vérification hebdomadaire des secrets
    - cron: '0 6 * * 1'  # Tous les lundis à 6h UTC

env:
  NODE_VERSION: '22'

jobs:
  validate-secrets:
    name: 🔐 Validation des Secrets
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Vérification des secrets essentiels
        run: |
          echo "🔍 Vérification des secrets essentiels..."
          
          # Fonction pour vérifier un secret
          check_secret() {
            local secret_name=$1
            local secret_value=$2
            local is_required=${3:-true}
            
            if [ -z "$secret_value" ]; then
              if [ "$is_required" = "true" ]; then
                echo "❌ SECRET MANQUANT (REQUIS): $secret_name"
                return 1
              else
                echo "⚠️  SECRET MANQUANT (OPTIONNEL): $secret_name"
                return 0
              fi
            else
              echo "✅ SECRET CONFIGURÉ: $secret_name"
              return 0
            fi
          }
          
          # Compteurs
          missing_required=0
          missing_optional=0
          
          echo ""
          echo "📋 SECRETS CI/CD ESSENTIELS:"
          check_secret "NX_CLOUD_ACCESS_TOKEN" "${{ secrets.NX_CLOUD_ACCESS_TOKEN }}" false || ((missing_optional++))
          check_secret "SLACK_WEBHOOK_URL" "${{ secrets.SLACK_WEBHOOK_URL }}" false || ((missing_optional++))
          
          echo ""
          echo "📋 SECRETS DE DÉPLOIEMENT:"
          check_secret "VERCEL_TOKEN" "${{ secrets.VERCEL_TOKEN }}" false || ((missing_optional++))
          check_secret "VERCEL_ORG_ID" "${{ secrets.VERCEL_ORG_ID }}" false || ((missing_optional++))
          check_secret "DOCKER_USERNAME" "${{ secrets.DOCKER_USERNAME }}" false || ((missing_optional++))
          check_secret "DOCKER_PASSWORD" "${{ secrets.DOCKER_PASSWORD }}" false || ((missing_optional++))
          
          echo ""
          echo "📋 SECRETS DE BASE DE DONNÉES:"
          check_secret "DATABASE_URL" "${{ secrets.DATABASE_URL }}" true || ((missing_required++))
          check_secret "REDIS_URL" "${{ secrets.REDIS_URL }}" true || ((missing_required++))
          
          echo ""
          echo "📋 SECRETS IA:"
          check_secret "OPENAI_API_KEY" "${{ secrets.OPENAI_API_KEY }}" true || ((missing_required++))
          check_secret "ANTHROPIC_API_KEY" "${{ secrets.ANTHROPIC_API_KEY }}" false || ((missing_optional++))
          check_secret "GOOGLE_CLOUD_API_KEY" "${{ secrets.GOOGLE_CLOUD_API_KEY }}" false || ((missing_optional++))
          
          echo ""
          echo "📋 SECRETS DE SÉCURITÉ:"
          check_secret "JWT_SECRET" "${{ secrets.JWT_SECRET }}" true || ((missing_required++))
          check_secret "ENCRYPTION_KEY" "${{ secrets.ENCRYPTION_KEY }}" true || ((missing_required++))
          check_secret "WEBHOOK_SECRET" "${{ secrets.WEBHOOK_SECRET }}" false || ((missing_optional++))
          
          echo ""
          echo "📋 SECRETS CLOUD:"
          check_secret "GCP_SERVICE_ACCOUNT_KEY" "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" false || ((missing_optional++))
          
          echo ""
          echo "📊 RÉSUMÉ:"
          echo "✅ Secrets requis manquants: $missing_required"
          echo "⚠️  Secrets optionnels manquants: $missing_optional"
          
          if [ $missing_required -gt 0 ]; then
            echo ""
            echo "❌ ÉCHEC: Des secrets requis sont manquants!"
            echo "📖 Consultez docs/github-secrets-setup.md pour la configuration"
            exit 1
          else
            echo ""
            echo "✅ SUCCÈS: Tous les secrets requis sont configurés"
          fi

      - name: 🔍 Validation avancée des formats
        if: github.event.inputs.check_level == 'full' || github.event.inputs.check_level == 'security'
        run: |
          echo "🔍 Validation des formats de secrets..."
          
          # Validation du format des tokens
          validate_format() {
            local secret_name=$1
            local secret_value=$2
            local expected_pattern=$3
            local description=$4
            
            if [ -n "$secret_value" ]; then
              if [[ $secret_value =~ $expected_pattern ]]; then
                echo "✅ FORMAT VALIDE: $secret_name ($description)"
              else
                echo "⚠️  FORMAT SUSPECT: $secret_name ($description)"
              fi
            fi
          }
          
          echo ""
          echo "📋 VALIDATION DES FORMATS:"
          
          # Validation NX Cloud Token
          if [ -n "${{ secrets.NX_CLOUD_ACCESS_TOKEN }}" ]; then
            nx_token="${{ secrets.NX_CLOUD_ACCESS_TOKEN }}"
            if [[ $nx_token == nx_cloud_* ]]; then
              echo "✅ FORMAT VALIDE: NX_CLOUD_ACCESS_TOKEN"
            else
              echo "⚠️  FORMAT SUSPECT: NX_CLOUD_ACCESS_TOKEN (devrait commencer par 'nx_cloud_')"
            fi
          fi
          
          # Validation Slack Webhook
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            slack_url="${{ secrets.SLACK_WEBHOOK_URL }}"
            if [[ $slack_url == https://hooks.slack.com/services/* ]]; then
              echo "✅ FORMAT VALIDE: SLACK_WEBHOOK_URL"
            else
              echo "⚠️  FORMAT SUSPECT: SLACK_WEBHOOK_URL (devrait être une URL Slack)"
            fi
          fi
          
          # Validation OpenAI API Key
          if [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
            openai_key="${{ secrets.OPENAI_API_KEY }}"
            if [[ $openai_key == sk-* ]]; then
              echo "✅ FORMAT VALIDE: OPENAI_API_KEY"
            else
              echo "⚠️  FORMAT SUSPECT: OPENAI_API_KEY (devrait commencer par 'sk-')"
            fi
          fi
          
          # Validation Database URL
          if [ -n "${{ secrets.DATABASE_URL }}" ]; then
            db_url="${{ secrets.DATABASE_URL }}"
            if [[ $db_url == postgresql://* ]] || [[ $db_url == postgres://* ]]; then
              echo "✅ FORMAT VALIDE: DATABASE_URL"
            else
              echo "⚠️  FORMAT SUSPECT: DATABASE_URL (devrait être une URL PostgreSQL)"
            fi
          fi
          
          # Validation Redis URL
          if [ -n "${{ secrets.REDIS_URL }}" ]; then
            redis_url="${{ secrets.REDIS_URL }}"
            if [[ $redis_url == redis://* ]] || [[ $redis_url == rediss://* ]]; then
              echo "✅ FORMAT VALIDE: REDIS_URL"
            else
              echo "⚠️  FORMAT SUSPECT: REDIS_URL (devrait être une URL Redis)"
            fi
          fi

      - name: 🔒 Test de sécurité des secrets
        if: github.event.inputs.check_level == 'security'
        run: |
          echo "🔒 Tests de sécurité des secrets..."
          
          # Vérification de la longueur des secrets
          check_secret_strength() {
            local secret_name=$1
            local secret_value=$2
            local min_length=${3:-32}
            
            if [ -n "$secret_value" ]; then
              local length=${#secret_value}
              if [ $length -ge $min_length ]; then
                echo "✅ LONGUEUR SÉCURISÉE: $secret_name ($length caractères)"
              else
                echo "⚠️  LONGUEUR FAIBLE: $secret_name ($length caractères, minimum recommandé: $min_length)"
              fi
            fi
          }
          
          echo ""
          echo "📋 VÉRIFICATION DE LA FORCE DES SECRETS:"
          
          # Vérification des secrets de sécurité
          if [ -n "${{ secrets.JWT_SECRET }}" ]; then
            check_secret_strength "JWT_SECRET" "${{ secrets.JWT_SECRET }}" 32
          fi
          
          if [ -n "${{ secrets.ENCRYPTION_KEY }}" ]; then
            check_secret_strength "ENCRYPTION_KEY" "${{ secrets.ENCRYPTION_KEY }}" 32
          fi
          
          if [ -n "${{ secrets.WEBHOOK_SECRET }}" ]; then
            check_secret_strength "WEBHOOK_SECRET" "${{ secrets.WEBHOOK_SECRET }}" 20
          fi
          
          echo ""
          echo "🔍 RECOMMANDATIONS DE SÉCURITÉ:"
          echo "• Rotation des secrets tous les 90 jours"
          echo "• Utilisation de secrets différents par environnement"
          echo "• Monitoring des accès aux secrets"
          echo "• Révocation immédiate en cas de compromission"

      - name: 📊 Génération du rapport
        if: always()
        run: |
          echo "📊 Génération du rapport de validation..."
          
          cat > secrets-validation-report.md << 'EOF'
          # 🔍 Rapport de Validation des Secrets GitHub
          
          **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Workflow**: ${{ github.workflow }}
          **Run ID**: ${{ github.run_id }}
          **Niveau de vérification**: ${{ github.event.inputs.check_level || 'basic' }}
          
          ## 📋 Statut des Secrets
          
          ### ✅ Secrets Configurés
          - Les secrets requis pour le fonctionnement de base sont présents
          - La validation des formats a été effectuée
          
          ### 📖 Documentation
          - Consultez `docs/github-secrets-setup.md` pour la configuration complète
          - Utilisez `scripts/setup-github-secrets.ps1` pour l'automatisation
          
          ### 🔄 Prochaines Actions
          - [ ] Planifier la rotation des secrets
          - [ ] Configurer les alertes de sécurité
          - [ ] Tester les secrets en environnement de staging
          
          ---
          
          *Rapport généré automatiquement par le workflow de validation*
          EOF
          
          echo "📄 Rapport généré: secrets-validation-report.md"

      - name: 📤 Upload du rapport
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secrets-validation-report
          path: secrets-validation-report.md
          retention-days: 30

      - name: 📢 Notification Slack (succès)
        if: success() && secrets.SLACK_WEBHOOK_URL
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#salambot-security'
          text: '✅ Validation des secrets GitHub réussie'
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📢 Notification Slack (échec)
        if: failure() && secrets.SLACK_WEBHOOK_URL
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#salambot-security'
          text: '❌ Validation des secrets GitHub échouée - Action requise'
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  security-audit:
    name: 🛡️ Audit de Sécurité
    runs-on: ubuntu-latest
    if: github.event.inputs.check_level == 'security'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Scan des secrets dans le code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: 🔒 Vérification des permissions
        run: |
          echo "🔒 Vérification des permissions du repository..."
          
          # Vérification des paramètres de sécurité recommandés
          echo "📋 Paramètres de sécurité recommandés:"
          echo "• Protection de la branche main activée"
          echo "• Revue de code obligatoire"
          echo "• Restrictions de push direct"
          echo "• Scan automatique des vulnérabilités"
          echo "• Alertes de sécurité activées"
          
          echo ""
          echo "⚠️  Vérifiez manuellement ces paramètres dans:"
          echo "   Settings > Branches > Branch protection rules"
          echo "   Settings > Security & analysis"

      - name: 📊 Résumé de l'audit
        run: |
          echo "📊 Résumé de l'audit de sécurité:"
          echo "✅ Scan des secrets dans le code terminé"
          echo "✅ Vérification des permissions effectuée"
          echo "📖 Consultez les artifacts pour les détails complets"